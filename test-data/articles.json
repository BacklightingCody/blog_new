{
  "users": [
    {
      "id": 1,
      "username": "admin",
      "firstName": "管理员",
      "lastName": null,
      "imageUrl": "https://api.dicebear.com/7.x/avataaars/svg?seed=admin"
    },
    {
      "id": 2,
      "username": "author",
      "firstName": "作者",
      "lastName": "小明",
      "imageUrl": "https://api.dicebear.com/7.x/avataaars/svg?seed=author"
    }
  ],
  "tags": [
    {
      "id": 1,
      "name": "React",
      "slug": "react",
      "color": "#61DAFB",
      "description": "React 相关技术"
    },
    {
      "id": 2,
      "name": "TypeScript",
      "slug": "typescript",
      "color": "#3178C6",
      "description": "TypeScript 相关技术"
    },
    {
      "id": 3,
      "name": "Next.js",
      "slug": "nextjs",
      "color": "#000000",
      "description": "Next.js 框架"
    },
    {
      "id": 4,
      "name": "Node.js",
      "slug": "nodejs",
      "color": "#339933",
      "description": "Node.js 后端技术"
    },
    {
      "id": 5,
      "name": "AI",
      "slug": "ai",
      "color": "#FF6B6B",
      "description": "人工智能相关"
    },
    {
      "id": 6,
      "name": "机器学习",
      "slug": "machine-learning",
      "color": "#4ECDC4",
      "description": "机器学习技术"
    },
    {
      "id": 7,
      "name": "Python",
      "slug": "python",
      "color": "#3776AB",
      "description": "Python 编程语言"
    },
    {
      "id": 8,
      "name": "美食",
      "slug": "food",
      "color": "#FF9F43",
      "description": "美食制作"
    }
  ],
  "articles": [
    {
      "id": 1,
      "slug": "react-18-concurrent-features",
      "title": "深入理解 React 18 的并发特性",
      "summary": "本文深入探讨了 React 18 引入的并发特性，包括 Suspense 组件的工作原理、Concurrent Rendering 的实现机制，以及这些特性如何提升用户体验。",
      "content": "# 深入理解 React 18 的并发特性\n\n## 目录\n<!-- toc -->\n\nReact 18 带来了许多令人兴奋的新特性，其中最重要的就是并发特性（Concurrent Features）。这些特性不仅改变了 React 的渲染方式，也为开发者提供了更好的用户体验控制能力。\n\n## 什么是并发渲染？\n\n并发渲染是 React 18 的核心特性之一。它允许 React 在渲染过程中被中断，从而让浏览器有机会处理其他任务，如用户输入、动画等。\n\n```javascript\n// 传统的同步渲染\nfunction App() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <h1>计数器: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>\n        增加\n      </button>\n    </div>\n  );\n}\n```\n\n## Suspense 的进化\n\nSuspense 在 React 18 中得到了显著的增强，现在可以更好地处理数据获取和代码分割。\n\n```jsx\nimport { Suspense } from 'react';\nimport { lazy } from 'react';\n\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>加载中...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n```\n\n## 实际应用示例\n\n### 1. 数据获取优化\n\n使用 Suspense 可以让我们更优雅地处理异步数据：\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nfunction UserProfile({ userId }: { userId: number }) {\n  const user = useSuspenseQuery<User>(`/api/users/${userId}`);\n  \n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n### 2. 渐进式加载\n\n通过 Suspense 的嵌套使用，可以实现页面的渐进式加载：\n\n```jsx\n<Suspense fallback={<HeaderSkeleton />}>\n  <Header />\n  <Suspense fallback={<SidebarSkeleton />}>\n    <Sidebar />\n    <Suspense fallback={<ContentSkeleton />}>\n      <MainContent />\n    </Suspense>\n  </Suspense>\n</Suspense>\n```\n\n## 性能优化建议\n\n1. **合理设置 Suspense 边界**：不要过度嵌套，也不要设置得太粗糙\n2. **使用 startTransition**：对于非紧急的更新，使用 startTransition 来标记\n3. **优化 fallback 组件**：确保 fallback 组件轻量且有意义\n\n## 总结\n\nReact 18 的并发特性为我们提供了强大的工具来构建更好的用户体验。通过合理使用 Suspense 和并发渲染，我们可以创建响应更快、体验更流畅的应用程序。\n\n这些特性的引入标志着 React 生态系统的一个重要里程碑，值得每个 React 开发者深入学习和实践。",
      "html": null,
      "coverImage": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop",
      "readTime": 8,
      "category": "programming",
      "isPublished": true,
      "isDraft": false,
      "viewCount": 1250,
      "likes": 89,
      "bookmarks": 34,
      "comments": 12,
      "userId": 1,
      "createdAt": "2024-01-15T10:30:00Z",
      "updatedAt": "2024-01-15T10:30:00Z",
      "articleTags": [
        { "tagId": 1 },
        { "tagId": 2 },
        { "tagId": 3 }
      ]
    },
    {
      "id": 2,
      "slug": "nextjs-app-router-guide",
      "title": "Next.js App Router 完全指南",
      "summary": "详细介绍 Next.js 13+ 的 App Router 特性，包括文件系统路由、布局、加载状态、错误处理等核心概念。",
      "content": "# Next.js App Router 完全指南\n\n## 目录\n<!-- toc -->\n\nNext.js 13 引入了全新的 App Router，这是一个基于 React Server Components 的新路由系统。本文将详细介绍如何使用这个强大的新特性。\n\n## 文件系统路由\n\nApp Router 使用文件系统来定义路由，每个文件夹代表一个路由段：\n\n```\napp/\n├── page.tsx          // /\n├── about/\n│   └── page.tsx      // /about\n├── blog/\n│   ├── page.tsx      // /blog\n│   └── [slug]/\n│       └── page.tsx  // /blog/[slug]\n└── dashboard/\n    ├── layout.tsx\n    ├── page.tsx      // /dashboard\n    └── settings/\n        └── page.tsx  // /dashboard/settings\n```\n\n## 布局系统\n\n布局是在多个页面之间共享的 UI。布局在导航时保持状态，不会重新渲染：\n\n```tsx\n// app/layout.tsx\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"zh\">\n      <body>\n        <nav>\n          <Link href=\"/\">首页</Link>\n          <Link href=\"/about\">关于</Link>\n        </nav>\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n## 服务器组件\n\nApp Router 默认使用 React Server Components，这意味着组件在服务器上渲染：\n\n```tsx\n// app/blog/page.tsx\nasync function getBlogPosts() {\n  const res = await fetch('https://api.example.com/posts')\n  return res.json()\n}\n\nexport default async function BlogPage() {\n  const posts = await getBlogPosts()\n  \n  return (\n    <div>\n      <h1>博客文章</h1>\n      {posts.map((post) => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.excerpt}</p>\n        </article>\n      ))}\n    </div>\n  )\n}\n```\n\n## 加载和错误状态\n\n### 加载状态\n\n```tsx\n// app/blog/loading.tsx\nexport default function Loading() {\n  return (\n    <div className=\"animate-pulse\">\n      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n    </div>\n  )\n}\n```\n\n### 错误处理\n\n```tsx\n// app/blog/error.tsx\n'use client'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>出错了！</h2>\n      <p>{error.message}</p>\n      <button onClick={reset}>重试</button>\n    </div>\n  )\n}\n```\n\n## 数据获取\n\n### 服务器端数据获取\n\n```tsx\nasync function getPost(slug: string) {\n  const res = await fetch(`https://api.example.com/posts/${slug}`, {\n    next: { revalidate: 3600 } // 1小时后重新验证\n  })\n  \n  if (!res.ok) {\n    throw new Error('获取文章失败')\n  }\n  \n  return res.json()\n}\n\nexport default async function PostPage({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n  \n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.content }} />\n    </article>\n  )\n}\n```\n\n### 客户端数据获取\n\n```tsx\n'use client'\n\nimport { useState, useEffect } from 'react'\n\nexport default function ClientComponent() {\n  const [data, setData] = useState(null)\n  \n  useEffect(() => {\n    fetch('/api/data')\n      .then(res => res.json())\n      .then(setData)\n  }, [])\n  \n  if (!data) return <div>加载中...</div>\n  \n  return <div>{/* 渲染数据 */}</div>\n}\n```\n\n## 最佳实践\n\n1. **合理使用服务器组件**：对于不需要交互的组件，优先使用服务器组件\n2. **优化数据获取**：使用 `fetch` 的缓存和重新验证选项\n3. **错误边界**：为每个路由段添加适当的错误处理\n4. **加载状态**：提供有意义的加载指示器\n\n## 总结\n\nApp Router 是 Next.js 的一个重大进步，它提供了更好的开发体验和性能。通过合理使用这些特性，我们可以构建更快、更可靠的 Web 应用程序。",
      "html": null,
      "coverImage": "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800&h=400&fit=crop",
      "readTime": 12,
      "category": "programming",
      "isPublished": true,
      "isDraft": false,
      "viewCount": 890,
      "likes": 67,
      "bookmarks": 28,
      "comments": 8,
      "userId": 2,
      "createdAt": "2024-01-10T14:20:00Z",
      "updatedAt": "2024-01-10T14:20:00Z",
      "articleTags": [
        { "tagId": 3 },
        { "tagId": 1 },
        { "tagId": 2 }
      ]
    },
    {
      "id": 3,
      "slug": "ai-prompt-engineering",
      "title": "AI 提示工程：如何与 AI 更好地对话",
      "summary": "探索提示工程的艺术，学习如何编写有效的提示来获得更好的 AI 响应，包括技巧、最佳实践和实际案例。",
      "content": "# AI 提示工程：如何与 AI 更好地对话\n\n## 目录\n<!-- toc -->\n\n随着 AI 技术的快速发展，学会如何与 AI 有效沟通变得越来越重要。提示工程（Prompt Engineering）是一门艺术，也是一门科学。\n\n## 什么是提示工程？\n\n提示工程是设计和优化输入提示的过程，以获得 AI 模型的最佳输出。一个好的提示可以显著提高 AI 响应的质量和相关性。\n\n## 基本原则\n\n### 1. 明确性\n\n**不好的提示：**\n```\n写一篇文章\n```\n\n**好的提示：**\n```\n写一篇关于可持续发展的 1000 字文章，\n面向企业管理者，重点讨论环保措施如何降低运营成本。\n包含 3 个具体案例和实施建议。\n```\n\n### 2. 上下文提供\n\n```\n角色：你是一位经验丰富的软件架构师\n任务：为一个电商平台设计微服务架构\n约束：需要支持高并发，预算有限\n输出格式：技术方案文档，包含架构图描述\n```\n\n## 总结\n\n提示工程是一项需要不断练习和优化的技能。通过明确的指令、丰富的上下文和合适的约束，我们可以显著提高与 AI 协作的效率和质量。\n\n记住：好的提示 = 明确的目标 + 充分的上下文 + 合理的约束 + 清晰的格式要求。",
      "html": null,
      "coverImage": "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=800&h=400&fit=crop",
      "readTime": 10,
      "category": "ai",
      "isPublished": true,
      "isDraft": false,
      "viewCount": 2100,
      "likes": 156,
      "bookmarks": 89,
      "comments": 23,
      "userId": 1,
      "createdAt": "2024-01-08T09:15:00Z",
      "updatedAt": "2024-01-08T09:15:00Z",
      "articleTags": [
        { "tagId": 5 },
        { "tagId": 6 }
      ]
    },
    {
      "id": 4,
      "slug": "homemade-pasta-recipe",
      "title": "手工意大利面制作指南",
      "summary": "从零开始学习制作正宗的手工意大利面，包括面团制作、擀面技巧和经典酱料搭配。",
      "content": "# 手工意大利面制作指南\n\n## 目录\n<!-- toc -->\n\n制作手工意大利面是一门艺术，也是一种享受。今天我们来学习如何在家制作正宗的意大利面。\n\n## 所需材料\n\n### 面团材料\n- 高筋面粉 400g\n- 鸡蛋 4个（室温）\n- 橄榄油 1汤匙\n- 盐 1茶匙\n\n### 工具\n- 大碗\n- 擀面杖或面条机\n- 干净的厨房毛巾\n- 面粉（防粘用）\n\n## 制作步骤\n\n### 1. 制作面团\n\n```\n1. 在大碗中混合面粉和盐\n2. 在中央挖一个井状凹陷\n3. 打入鸡蛋，加入橄榄油\n4. 用叉子从中心开始搅拌，逐渐加入面粉\n5. 当混合物变稠时，用手开始揉面\n```\n\n### 2. 揉面技巧\n\n揉面是关键步骤，需要耐心：\n\n- 将面团放在撒了面粉的台面上\n- 用手掌根部向前推压面团\n- 将面团对折，转90度，重复动作\n- 持续揉面8-10分钟，直到面团光滑有弹性\n\n### 3. 醒面\n\n```\n1. 将面团包在湿布中\n2. 室温下醒面30分钟\n3. 这样可以让面筋充分发展\n```\n\n### 4. 擀面和切面\n\n#### 手工擀面\n- 将面团分成4等份\n- 每份擀成薄片（约2mm厚）\n- 撒上面粉防粘\n- 卷起后切成所需宽度\n\n#### 使用面条机\n```python\n# 面条机设置参考\n厚度设置 = {\n    \"初始\": 1档（最厚）,\n    \"逐渐调薄\": 2档 -> 3档 -> 4档,\n    \"最终厚度\": 5档或6档\n}\n```\n\n## 经典酱料搭配\n\n### 番茄罗勒酱\n\n**材料：**\n- 新鲜番茄 500g\n- 大蒜 3瓣\n- 新鲜罗勒叶\n- 橄榄油\n- 盐和黑胡椒\n\n**制作：**\n1. 番茄去皮切丁\n2. 热锅下橄榄油，爆香蒜蓉\n3. 加入番茄丁，小火煮15分钟\n4. 调味，最后加入罗勒叶\n\n### 奶油蘑菇酱\n\n**材料：**\n- 混合蘑菇 300g\n- 淡奶油 200ml\n- 白酒 50ml\n- 洋葱 1个\n- 帕尔马干酪\n\n## 烹饪技巧\n\n### 煮面要点\n\n1. **水要足够多**：1升水配100g面条\n2. **盐要适量**：水应该尝起来像海水\n3. **不要加油**：会影响酱料附着\n4. **时间控制**：新鲜面条只需2-3分钟\n\n### 完美融合\n\n```\n1. 面条煮至8分熟时捞起\n2. 直接放入热酱料中\n3. 加入少量煮面水\n4. 快速翻炒30秒至1分钟\n5. 让面条和酱料完美融合\n```\n\n## 保存方法\n\n### 短期保存\n- 撒上面粉，放在托盘上\n- 盖上湿布，冰箱保存1-2天\n\n### 长期保存\n- 将面条晾干至完全脱水\n- 密封保存，可放置数周\n- 或者冷冻保存，可放置数月\n\n## 常见问题解决\n\n### 面团太干\n- 一次加入1茶匙水\n- 继续揉面直到合适\n\n### 面团太湿\n- 撒入少量面粉\n- 继续揉面调整\n\n### 面条粘连\n- 确保撒足够面粉\n- 及时分开晾晒\n\n## 营养价值\n\n手工意大利面相比工业制品：\n- 无添加剂和防腐剂\n- 口感更有嚼劲\n- 营养保留更完整\n- 可以控制盐分和油脂\n\n## 总结\n\n制作手工意大利面需要练习，但过程本身就是一种享受。从揉面的节奏感到看着面条成型的成就感，每一步都充满乐趣。\n\n记住：好的意大利面 = 优质材料 + 耐心制作 + 完美时机。\n\n**小贴士：** 第一次制作可能不完美，但每次都会有进步。享受这个过程，和家人朋友一起制作会更有趣！",
      "html": null,
      "coverImage": "https://images.unsplash.com/photo-1551183053-bf91a1d81141?w=800&h=400&fit=crop",
      "readTime": 15,
      "category": "recipe",
      "isPublished": true,
      "isDraft": false,
      "viewCount": 1680,
      "likes": 234,
      "bookmarks": 156,
      "comments": 45,
      "userId": 2,
      "createdAt": "2024-01-05T16:45:00Z",
      "updatedAt": "2024-01-05T16:45:00Z",
      "articleTags": [
        { "tagId": 8 }
      ]
    }
  ]
}
